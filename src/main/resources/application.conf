nebula {
    //Json configuration files
    actorSystemJsonFile = "src/main/resources/json/ActorSystem.json",
    actorsJsonFile = "src/main/resources/json/ActorsTransition.json",
    messagesJsonFile = "src/main/resources/json/Messages.json",
    orchestratorJsonFile = "src/main/resources/json/Orchestrator.json",
    //Dynamic config
    actorsDynamicJsonFile = "src/main/resources/json/ActorsDynamic.json",
    messagesDynamicJsonFile = "src/main/resources/json/DynamicMessages.json",
    //Yaml configuration files
    actorSystemYamlFile = "src/main/resources/yaml/ActorSystem.yaml",
    actorsYamlFile = "src/main/resources/yaml/Actors.yaml",
    messagesYamlFile = "src/main/resources/yaml/Messages.yaml",
    //Dynamic config
    actorsDynamicYamlFile = "src/main/resources/yaml/ActorsDynamic.yaml",
    messagesDynamicYamlFile = "src/main/resources/yaml/DynamicMessages.yaml",
    //Debug params
    runCode = true,
    generateCaseClasses = true,
    buildArtifact = false,
    //Enable Kamon instrumentation
    enableKamon = false,
    //Json configuration files for fat jar
    actorSystemBuildJsonFile = "./ActorSystem.json",
    messagesBuildJsonFile = "./Messages.json",
    dynamicMessagesBuildJsonFile = "./DynamicMessages.json"
    actorsBuildJsonFile = "./Actors.json",
    orchestratorBuildJsonFile = "./Orchestrator.json"
}

cinnamon.application = "Nebula"
//Cinnamon monitoring instrumentation config
cinnamon {
  #chmetrics = {
    #reporters += "console-reporter"
  #}
  akka.actors = {
    default-by-class {
      includes = "/user/*"
      report-by = class
    }
  }

  akka.dispatchers = {
    basic-information {
      names = ["*"]
    }
    time-information {
      names = ["*"]
    }
  }

  akka.remote = {
    serialization-timing = on
    failure-detector-metrics = on
  }

  akka.cluster = {
    domain-events = on
    node-metrics = on
    member-events = on
    singleton-events = on
    shard-region-info = on
  }

  akka.http = {
    servers {
      "*:*" {
        paths {
          "*" {
            metrics = on
          }
        }
      }
    }
    clients {
      "*:*" {
        paths {
          "*" {
            metrics = on
          }
        }
      }
    }
  }
}

cinnamon.prometheus {
  exporters += http-server
}

kamon {
  environment.service = "Nebula"
  apm.api-key = "lm2ldg9jo845d83kmtrm9cd4ev"
}

kamon.prometheus {
  embedded-server {
    hostname = 0.0.0.0
    port = 9095
  }
}
